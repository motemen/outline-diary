{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["darkTheme","createTheme","palette","mode","transformHighlightQuery","query","tree","children","flatMap","node","type","highlightQuery","found","value","includes","split","map","p","u","i","App","DEFAULT_SOURCE","useHash","hash","setHash","useQueryParam","StringParam","source","setLocationParamSource","useState","decodeURIComponent","replace","setQueryState","useSWR","url","fetch","then","r","text","data","error","className","keywords","title","content","unified","use","remarkParse","remarkFrontmatter","length","y","loadYAML","e","console","remarkRehype","rehypeReact","createElement","React","processSync","result","ThemeProvider","theme","Helmet","Autocomplete","options","blurOnSelect","selectOnFocus","onInputChange","event","newInputValue","setQuery","defaultValue","freeSolo","renderInput","params","TextField","placeholder","variant","href","WrappedApp","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9c56aed6.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"./App.css\";\nimport useSWR from \"swr/immutable\";\nimport { unified } from \"unified\";\nimport remarkParse from \"remark-parse\";\nimport remarkFrontmatter from \"remark-frontmatter\";\nimport remarkRehype from \"remark-rehype\";\nimport rehypeReact from \"rehype-react\";\nimport { u } from \"unist-builder\";\nimport type { Content, Root } from \"mdast\";\nimport Autocomplete from \"@mui/material/Autocomplete\";\nimport TextField from \"@mui/material/TextField\";\nimport { createTheme, ThemeProvider } from \"@mui/material\";\nimport { load as loadYAML } from \"js-yaml\";\nimport { Helmet } from \"react-helmet\";\nimport { useHash } from \"react-use\";\nimport {\n  useQueryParam,\n  StringParam,\n  QueryParamProvider,\n} from \"use-query-params\";\n\nconst darkTheme = createTheme({\n  palette: {\n    mode: \"dark\",\n  },\n});\n\nconst transformHighlightQuery = (query: string | undefined) => (tree: Root) => {\n  if (!query) {\n    return tree;\n  }\n\n  return {\n    ...tree,\n    children: tree.children.flatMap((node): Content[] => {\n      if (node.type !== \"list\") {\n        return [node];\n      }\n\n      const highlightQuery = (node: Content): boolean => {\n        if (!(\"children\" in node)) {\n          return false;\n        }\n\n        let found = false;\n        node.children = node.children.flatMap((node): any[] => {\n          if (node.type === \"text\" && node.value.includes(query)) {\n            found = true;\n            return node.value\n              .split(query)\n              .map((p) => u(\"text\", p))\n              .flatMap((p, i) =>\n                i === 0 ? [p] : [u(\"strong\", [u(\"text\", query)]), p]\n              );\n          }\n\n          if (highlightQuery(node)) {\n            found = true;\n          }\n\n          return [node];\n        });\n\n        return found;\n      };\n\n      node.children = node.children.flatMap((node) => {\n        return highlightQuery(node) ? [node] : [];\n      });\n\n      return [node];\n    }),\n  };\n};\n\nfunction App() {\n  const DEFAULT_SOURCE = \"./outer_wilds.md.txt\";\n  const fetcher = (url: string) => fetch(url).then((r) => r.text());\n\n  const [hash, setHash] = useHash();\n  let [source, setLocationParamSource] = useQueryParam(\"u\", StringParam);\n  if (!source) {\n    setLocationParamSource(DEFAULT_SOURCE, \"replaceIn\");\n    source = DEFAULT_SOURCE;\n  }\n  const [query, setQueryState] = useState<string | undefined>(\n    decodeURIComponent(hash.replace(/^#/, \"\"))\n  );\n\n  const { data, error } = useSWR(source, fetcher);\n\n  if (error) {\n    return (\n      <div className=\"error\">\n        ❌ Failed to fetch {source}: {`${error}`}\n      </div>\n    );\n  }\n  if (!data || !source) {\n    return <div className=\"loading\"></div>;\n  }\n\n  const setQuery = (query: string) => {\n    setQueryState(query);\n    setHash(query);\n  };\n\n  let keywords: string[] = [];\n  let title: string = \"\";\n  const processor = unified()\n    .use(remarkParse)\n    .use(remarkFrontmatter)\n    .use(() => (tree) => {\n      if (tree.children.length > 1 && tree.children[0].type === \"yaml\") {\n        try {\n          const y = loadYAML(tree.children[0].value) as any;\n          keywords = y[\"keywords\"] as string[];\n          title = y[\"title\"];\n        } catch (e) {\n          console.error(e);\n        }\n      }\n    })\n    .use(transformHighlightQuery, query)\n    .use(remarkRehype)\n    .use(rehypeReact, { createElement: React.createElement });\n\n  const content = processor.processSync(data).result;\n\n  return (\n    <ThemeProvider theme={darkTheme}>\n      <Helmet>\n        <title>{title}</title>\n      </Helmet>\n      <nav>\n        <Autocomplete\n          options={keywords}\n          blurOnSelect\n          selectOnFocus\n          onInputChange={(event, newInputValue) => {\n            setQuery(newInputValue);\n          }}\n          defaultValue={query}\n          freeSolo={true}\n          renderInput={(params) => (\n            <TextField placeholder=\"Filter…\" {...params} variant=\"standard\" />\n          )}\n        ></Autocomplete>\n        <small>\n          Source: <a href={source}>{source}</a>\n        </small>\n      </nav>\n      <main>\n        <div>{content}</div>\n      </main>\n    </ThemeProvider>\n  );\n}\n\nconst WrappedApp = () => (\n  <QueryParamProvider>\n    <App></App>\n  </QueryParamProvider>\n);\n\nexport default WrappedApp;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}